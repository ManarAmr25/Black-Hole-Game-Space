# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap

import gui
from backend_layer.facade import Facade
from params import *


class AchievementsWindow(QWidget):
    def init_bcg_lbl(self):
        label = QtWidgets.QLabel(self)
        # label.setGeometry(QtCore.QRect(0, 0, 5556, 5574))
        label.setGeometry(0, 0, 600, 750)
        label.setFixedSize(1920, 1080)
        label.setText("")
        label.setPixmap(QtGui.QPixmap("../storage/BackGround/user.jpg"))
        label.setObjectName("bcg_lbl")
        return label

    def init_namelbl(self):
        namelbl = QtWidgets.QLabel(self)
        namelbl.setGeometry(QtCore.QRect(880, 250, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(17)
        namelbl.setFont(font)
        namelbl.setStyleSheet("color:white;")
        namelbl.setObjectName("namelbl")
        # namelbl.setText(gui.player_global.get_name())
        return namelbl

    def init_avatarlbl(self):
        avatarlbl = QtWidgets.QLabel(self)
        avatarlbl.setGeometry(QtCore.QRect(850, 60, 180, 180))
        avatarlbl.setStyleSheet("background-color:white;\n"
                                "border-radius:90px;")
        avatarlbl.setObjectName("avatarlbl")
        '''pixmap = QPixmap(gui.player_global.get_avatar())
        avatarlbl.setPixmap(QPixmap(pixmap))
        avatarlbl.setScaledContents(True)'''
        return avatarlbl

    def get_back_button(self):
        button = QtWidgets.QPushButton(self)
        button.setGeometry(QtCore.QRect(40, 870, 80, 80))
        button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        button.setStyleSheet(back_button_style)
        button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../storage/Icons/back.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        button.setIcon(icon)
        button.setIconSize(QtCore.QSize(80, 80))
        button.setObjectName("back_pushButton")
        return button

    def init_achievements_table(self):
        achievements_table = QtWidgets.QTableWidget(self)
        achievements_table.setGeometry(QtCore.QRect(380, 320, 1150, 300))
        achievements_table.setFixedHeight(570)
        achievements_table.horizontalScrollBar().hide()
        achievements_table.setStyleSheet(achievment_table_style)
        achievements_table.verticalScrollBar().setStyleSheet(scroll_style)
        achievements_table.setObjectName("achievements_table")
        achievements_table.setFont(init_font_start(20, False))
        achievements_table.horizontalHeader().setFont(init_font_start(20, False))
        achievements_table.setColumnCount(3)
        achievements_table.setColumnWidth(0, 500)
        achievements_table.setColumnWidth(1, 400)
        achievements_table.setColumnWidth(2, 250)
        achievements_table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        achievements_table.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Fixed)
        achievements_table.verticalHeader().hide()
        achievements_table.setShowGrid(False)
        item = QtWidgets.QTableWidgetItem()
        item.setText("Achievements")
        achievements_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setText("Reward")
        achievements_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setText("Progress")
        achievements_table.setHorizontalHeaderItem(2, item)
        achievements_table.resetVerticalScrollMode()
        achievements_table.setSortingEnabled(True)
        return achievements_table

    def fill_table(self, achievements_list=[]):
        # x = [('a', 50), ('b', 10), ('c', 60), ('b', 10), ('c', 60), ('b', 10), ('c', 60)]
        self.achievements_table.setRowCount(len(achievements_list))
        j = 0
        for i in achievements_list:
            achievment, reward, checked = i
            print(i, j, "achievement >>> " , achievment, reward, checked)

            item = QtWidgets.QTableWidgetItem()
            item.setTextAlignment(QtCore.Qt.AlignCenter)
            item.setText(str(achievment))
            self.achievements_table.setItem(j, 0, item)

            item = QtWidgets.QTableWidgetItem()
            item.setTextAlignment(QtCore.Qt.AlignCenter)
            item.setText(str(reward) + " xp")
            self.achievements_table.setItem(j, 1, item)

            item = QtWidgets.QTableWidgetItem()
            item.setTextAlignment(QtCore.Qt.AlignCenter)
            item.setText(('Completed!' if checked else 'incomplete'))
            self.achievements_table.setItem(j, 2, item)

            self.achievements_table.setRowHeight(j, 100)
            j += 1

    def __init__(self, parent=None):
        super(AchievementsWindow, self).__init__(parent)
        self.resize(1938, 1043)
        self.setFont(get_font(15))
        self.setWindowTitle("Achievements")
        
        # MainWindow.resize(gamespace_width, gamespace_height)
        # self.central_widget = QtWidgets.QWidget(self)
        # self.central_widget.setObjectName("central_widget")
        self.bcg_lbl = self.init_bcg_lbl()
        self.achievements_table = self.init_achievements_table()

        # self.fill_table()
        self.namelbl = self.init_namelbl()
        self.avatarlbl = self.init_avatarlbl()
        self.back_btn = self.get_back_button()
        # self.setCentralWidget(self.central_widget)
        # self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(self)

    '''def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
'''

# TODO remove and link to profile
'''if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    # app.setStyleSheet(stylesheet)
    MainWindow = QtWidgets.QMainWindow()
    ui = AchievementsWindow()
    ui.setupUi(MainWindow)
    MainWindow.showFullScreen()
    sys.exit(app.exec_())

'''
class AchievementsMain(QMainWindow):
    def __init__(self, parent=None):
        super(AchievementsMain, self).__init__(parent)
        self.setGeometry(50, 50, 600, 750)
        self.setFixedSize(1920, 1080)
        self.startUIWindow()
        self.movie = QMovie("../storage/BackGround/user.jpg")
        self.movie.frameChanged.connect(self.repaint)
        self.movie.start()

    def startUIWindow(self):
        self.Window = AchievementsWindow(self)
        self.setWindowTitle("My Program")

    def paintEvent(self, event):
        currentFrame = self.movie.currentPixmap()
        frameRect = currentFrame.rect()
        frameRect.moveCenter(self.rect().center())
        if frameRect.intersects(event.rect()):
            painter = QPainter(self)
            painter.drawPixmap(frameRect.left(), frameRect.top(), currentFrame)

    def refresh(self):
        self.Window.namelbl.setText(gui.player_global.get_name())
        pixmap = QPixmap(gui.player_global.get_avatar())
        self.Window.avatarlbl.setPixmap(QPixmap(pixmap))
        self.Window.avatarlbl.setScaledContents(True)
        f = Facade.get_instance()
        x = f.get_achievements()
        self.Window.fill_table(x)
